{"ast":null,"code":"var _jsxFileName = \"/home/sathish/Desktop/Assignment/weatherapp/weather-app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Weather from \"./Components/Weather\";\nimport SearchBar from \"./Components/SearchBar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [darkMode, setDarkMode] = useState(false);\n  // useEffect(() => {\n  //   // Set Hyderabad as the default city\n  //   fetchWeather(\"hyderabad\");\n  // }, []);\n  // const fetchWeather = async (query) => {\n  //   try {\n  //     const locationResponse = await axios.get(\n  //       `https://geocoding-api.open-meteo.com/v1/search`,\n  //       {\n  //         params: { name: query },\n  //       }\n  //     );\n\n  //     if (\n  //       locationResponse.data.results &&\n  //       locationResponse.data.results.length > 0\n  //     ) {\n  //       const { latitude, longitude, name } = locationResponse.data.results[0];\n  //       const weatherResponse = await axios.get(\n  //         `https://api.open-meteo.com/v1/forecast`,\n  //         {\n  //           params: {\n  //             latitude,\n  //             longitude,\n  //             current_weather: true,\n  //           },\n  //         }\n  //       );\n\n  //       setWeather({ ...weatherResponse.data, city: name });\n  //     } else {\n  //       alert(\"City not found\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Error fetching weather data:\", error);\n  //     alert(\"Unable to fetch weather data. Please try again.\");\n  //   }\n  // };\n  const fetchWeather = async query => {\n    try {\n      const locationResponse = await axios.get(`https://geocoding-api.open-meteo.com/v1/search`, {\n        params: {\n          name: query\n        }\n      });\n      if (locationResponse.data.results && locationResponse.data.results.length > 0) {\n        const {\n          latitude,\n          longitude,\n          name\n        } = locationResponse.data.results[0];\n        const weatherResponse = await axios.get(`https://api.open-meteo.com/v1/forecast`, {\n          params: {\n            latitude,\n            longitude,\n            current_weather: true\n          }\n        });\n        setWeather({\n          ...weatherResponse.data,\n          city: name\n        });\n      } else {\n        alert(\"City not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      alert(\"Unable to fetch weather data. Please try again.\");\n    }\n  };\n  const toggleDarkMode = () => setDarkMode(!darkMode);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 mx-0 card  my-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `app ${darkMode ? \"dark-mode rounded\" : \"\"}  d-flex justify-content-center align-content-center`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container p-5 mx-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex  flex-column flex-md-row justify-content-between\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"my-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"bi bi-cloud-sun\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 93,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 19\n                }, this), \"Weather App\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: toggleDarkMode,\n                className: \"btn btn-secondary my-3\",\n                children: darkMode ? \"Light Mode\" : \"Dark Mode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n                onSearch: fetchWeather(\"Hyderabad\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Weather, {\n                weather: weather\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"MT0llsbEBgR2686UiuWImpcnS6I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Weather","SearchBar","jsxDEV","_jsxDEV","App","_s","weather","setWeather","darkMode","setDarkMode","fetchWeather","query","locationResponse","get","params","name","data","results","length","latitude","longitude","weatherResponse","current_weather","city","alert","error","console","toggleDarkMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSearch","_c","$RefreshReg$"],"sources":["/home/sathish/Desktop/Assignment/weatherapp/weather-app/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Weather from \"./Components/Weather\";\nimport SearchBar from \"./Components/SearchBar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [weather, setWeather] = useState(null);\n  const [darkMode, setDarkMode] = useState(false);\n  // useEffect(() => {\n  //   // Set Hyderabad as the default city\n  //   fetchWeather(\"hyderabad\");\n  // }, []);\n  // const fetchWeather = async (query) => {\n  //   try {\n  //     const locationResponse = await axios.get(\n  //       `https://geocoding-api.open-meteo.com/v1/search`,\n  //       {\n  //         params: { name: query },\n  //       }\n  //     );\n\n  //     if (\n  //       locationResponse.data.results &&\n  //       locationResponse.data.results.length > 0\n  //     ) {\n  //       const { latitude, longitude, name } = locationResponse.data.results[0];\n  //       const weatherResponse = await axios.get(\n  //         `https://api.open-meteo.com/v1/forecast`,\n  //         {\n  //           params: {\n  //             latitude,\n  //             longitude,\n  //             current_weather: true,\n  //           },\n  //         }\n  //       );\n\n  //       setWeather({ ...weatherResponse.data, city: name });\n  //     } else {\n  //       alert(\"City not found\");\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Error fetching weather data:\", error);\n  //     alert(\"Unable to fetch weather data. Please try again.\");\n  //   }\n  // };\n  const fetchWeather = async (query) => {\n    try {\n      const locationResponse = await axios.get(`https://geocoding-api.open-meteo.com/v1/search`, {\n        params: { name: query },\n      });\n\n      if (locationResponse.data.results && locationResponse.data.results.length > 0) {\n        const { latitude, longitude, name } = locationResponse.data.results[0];\n        const weatherResponse = await axios.get(`https://api.open-meteo.com/v1/forecast`, {\n          params: {\n            latitude,\n            longitude,\n            current_weather: true,\n          },\n        });\n\n        setWeather({ ...weatherResponse.data, city: name });\n      } else {\n        alert(\"City not found\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      alert(\"Unable to fetch weather data. Please try again.\");\n    }\n  };\n\n\n\n  const toggleDarkMode = () => setDarkMode(!darkMode);\n\n  return (\n    <div className=\"container \">\n      <div className=\"row\">\n        <div className=\"col-12 mx-0 card  my-5\">\n          <div\n            className={`app ${\n              darkMode ? \"dark-mode rounded\" : \"\"\n            }  d-flex justify-content-center align-content-center`}\n          >\n            <div className=\"container p-5 mx-5\">\n              <div className=\"d-flex  flex-column flex-md-row justify-content-between\">\n                <h1 className=\"my-2\">\n                  <span>\n                    <i className=\"bi bi-cloud-sun\"></i>\n                  </span>\n                  Weather App\n                </h1>\n                <span\n                  onClick={toggleDarkMode}\n                  className=\"btn btn-secondary my-3\"\n                >\n                  {darkMode ? \"Light Mode\" : \"Dark Mode\"}\n                </span>\n              </div>\n              <div>\n                <SearchBar onSearch={fetchWeather(\"Hyderabad\")} />\n                <Weather weather={weather} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}