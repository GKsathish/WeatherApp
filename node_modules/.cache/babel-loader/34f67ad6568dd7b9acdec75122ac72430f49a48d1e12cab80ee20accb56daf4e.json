{"ast":null,"code":"var _jsxFileName = \"/home/sathish/Desktop/Assignment/weatherapp/weather-app/src/App.js\",\n  _s = $RefreshSig$();\n// // src/App.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import Weather from './Components/Weather';\n// import SearchBar from './Components/SearchBar';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import './index.css';\n\n// const App = () => {\n//   const [weather, setWeather] = useState(null);\n//   const [darkMode, setDarkMode] = useState(false);\n//   const fetchWeather = async (query) => {\n//     try {\n//       const locationResponse = await axios.get(`https://geocoding-api.open-meteo.com/v1/search`, {\n//         params: { name: query },\n//       });\n\n//       if (locationResponse.data.results && locationResponse.data.results.length > 0) {\n//         const { latitude, longitude, name } = locationResponse.data.results[0];\n//         const weatherResponse = await axios.get(`https://api.open-meteo.com/v1/forecast`, {\n//           params: {\n//             latitude,\n//             longitude,\n//             current_weather: true,\n//           },\n//         });\n\n//         setWeather({ ...weatherResponse.data, city: name });\n//       } else {\n//         alert(\"City not found\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching weather data:\", error);\n//       alert(\"Unable to fetch weather data. Please try again.\");\n//     }\n//   };\n\n//   const toggleDarkMode = () => setDarkMode(!darkMode);\n\n//   return (\n//     <div className='container '>\n// <div className='row'>\n//   <div className='col-12 shadow   my-5'>\n//   <div className={`app ${darkMode ? 'dark-mode' : ''}  d-flex justify-content-center align-items-center`}>\n//       <div className=\"container p-5 mx-5\">\n//      <div className='d-flex justify-content-between'>\n//      <h1 className='my-2'><span><i className=\"bi bi-cloud-sun\"></i></span>Weather App</h1>\n//         <span onClick={toggleDarkMode} className=\"btn btn-secondary my-3\">\n//           {darkMode ? 'Light Mode' : 'Dark Mode'}\n//         </span>\n//      </div>\n//      <div>\n//      <SearchBar onSearch={fetchWeather} />\n//         <Weather weather={weather} />\n//      </div>\n\n//       </div>\n//     </div>\n//   </div>\n// </div>\n//     </div>\n\n//   );\n// };\n\n// export default App;\n\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Weather from './Components/Weather';\nimport SearchBar from './Components/SearchBar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Fetch weather data based on city or coordinates\n  const fetchWeather = async ({\n    query,\n    latitude,\n    longitude\n  } = {}) => {\n    try {\n      let params = {};\n      if (query) {\n        const locationResponse = await axios.get(`https://geocoding-api.open-meteo.com/v1/search`, {\n          params: {\n            name: query\n          }\n        });\n        if (locationResponse.data.results && locationResponse.data.results.length > 0) {\n          const {\n            latitude,\n            longitude,\n            name\n          } = locationResponse.data.results[0];\n          params = {\n            latitude,\n            longitude\n          };\n          setWeather(prevWeather => ({\n            ...prevWeather,\n            city: name\n          }));\n        } else {\n          alert(\"City not found\");\n          return;\n        }\n      } else if (latitude && longitude) {\n        var _reverseGeoResponse$d, _reverseGeoResponse$d2;\n        params = {\n          latitude,\n          longitude\n        };\n        const reverseGeoResponse = await axios.get(`https://geocoding-api.open-meteo.com/v1/reverse`, {\n          params: {\n            latitude,\n            longitude\n          }\n        });\n        const cityName = ((_reverseGeoResponse$d = reverseGeoResponse.data.results) === null || _reverseGeoResponse$d === void 0 ? void 0 : (_reverseGeoResponse$d2 = _reverseGeoResponse$d[0]) === null || _reverseGeoResponse$d2 === void 0 ? void 0 : _reverseGeoResponse$d2.name) || \"Your Location\";\n        setWeather(prevWeather => ({\n          ...prevWeather,\n          city: cityName\n        }));\n      } else {\n        // Default location: London\n        params = {\n          latitude: 51.5074,\n          longitude: -0.1278\n        };\n        setWeather(prevWeather => ({\n          ...prevWeather,\n          city: \"London\"\n        }));\n      }\n      const weatherResponse = await axios.get(`https://api.open-meteo.com/v1/forecast`, {\n        params: {\n          ...params,\n          current_weather: true\n        }\n      });\n      setWeather(prevWeather => ({\n        ...weatherResponse.data,\n        city: prevWeather.city\n      }));\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      alert(\"Unable to fetch weather data. Please try again.\");\n    }\n  };\n\n  // Fetch weather for user's location on load\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      fetchWeather({\n        latitude,\n        longitude\n      });\n    }, error => {\n      console.error(\"Error fetching user's location:\", error);\n      fetchWeather(); // Default to London if geolocation fails\n    });\n  }, []);\n  const toggleDarkMode = () => setDarkMode(!darkMode);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 shadow my-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `app ${darkMode ? 'dark-mode' : ''} d-flex justify-content-center align-items-center`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container p-5 mx-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex justify-content-between\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"my-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"bi bi-cloud-sun\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 19\n                }, this), \"Weather App\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                onClick: toggleDarkMode,\n                className: \"btn btn-secondary my-3\",\n                children: darkMode ? 'Light Mode' : 'Dark Mode'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n                onSearch: query => fetchWeather({\n                  query\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Weather, {\n                weather: weather\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"EtxaqN78PS+5EmiRrWi92Ao4aVc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Weather","SearchBar","jsxDEV","_jsxDEV","App","_s","weather","setWeather","darkMode","setDarkMode","fetchWeather","query","latitude","longitude","params","locationResponse","get","name","data","results","length","prevWeather","city","alert","_reverseGeoResponse$d","_reverseGeoResponse$d2","reverseGeoResponse","cityName","weatherResponse","current_weather","error","console","navigator","geolocation","getCurrentPosition","position","coords","toggleDarkMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSearch","_c","$RefreshReg$"],"sources":["/home/sathish/Desktop/Assignment/weatherapp/weather-app/src/App.js"],"sourcesContent":["// // src/App.js\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import Weather from './Components/Weather';\n// import SearchBar from './Components/SearchBar';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import './index.css';\n\n// const App = () => {\n//   const [weather, setWeather] = useState(null);\n//   const [darkMode, setDarkMode] = useState(false);\n//   const fetchWeather = async (query) => {\n//     try {\n//       const locationResponse = await axios.get(`https://geocoding-api.open-meteo.com/v1/search`, {\n//         params: { name: query },\n//       });\n\n//       if (locationResponse.data.results && locationResponse.data.results.length > 0) {\n//         const { latitude, longitude, name } = locationResponse.data.results[0];\n//         const weatherResponse = await axios.get(`https://api.open-meteo.com/v1/forecast`, {\n//           params: {\n//             latitude,\n//             longitude,\n//             current_weather: true,\n//           },\n//         });\n\n//         setWeather({ ...weatherResponse.data, city: name });\n//       } else {\n//         alert(\"City not found\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching weather data:\", error);\n//       alert(\"Unable to fetch weather data. Please try again.\");\n//     }\n//   };\n\n//   const toggleDarkMode = () => setDarkMode(!darkMode);\n\n//   return (\n//     <div className='container '>\n// <div className='row'>\n//   <div className='col-12 shadow   my-5'>\n//   <div className={`app ${darkMode ? 'dark-mode' : ''}  d-flex justify-content-center align-items-center`}>\n//       <div className=\"container p-5 mx-5\">\n//      <div className='d-flex justify-content-between'>\n//      <h1 className='my-2'><span><i className=\"bi bi-cloud-sun\"></i></span>Weather App</h1>\n//         <span onClick={toggleDarkMode} className=\"btn btn-secondary my-3\">\n//           {darkMode ? 'Light Mode' : 'Dark Mode'}\n//         </span>\n//      </div>\n//      <div>\n//      <SearchBar onSearch={fetchWeather} />\n//         <Weather weather={weather} />\n//      </div>\n\n//       </div>\n//     </div>\n//   </div>\n// </div>\n//     </div>\n   \n//   );\n// };\n\n// export default App;\n\n\n\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Weather from './Components/Weather';\nimport SearchBar from './Components/SearchBar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nconst App = () => {\n  const [weather, setWeather] = useState(null);\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Fetch weather data based on city or coordinates\n  const fetchWeather = async ({ query, latitude, longitude } = {}) => {\n    try {\n      let params = {};\n      if (query) {\n        const locationResponse = await axios.get(`https://geocoding-api.open-meteo.com/v1/search`, {\n          params: { name: query },\n        });\n        if (locationResponse.data.results && locationResponse.data.results.length > 0) {\n          const { latitude, longitude, name } = locationResponse.data.results[0];\n          params = { latitude, longitude };\n          setWeather(prevWeather => ({ ...prevWeather, city: name }));\n        } else {\n          alert(\"City not found\");\n          return;\n        }\n      } else if (latitude && longitude) {\n        params = { latitude, longitude };\n        const reverseGeoResponse = await axios.get(`https://geocoding-api.open-meteo.com/v1/reverse`, {\n          params: { latitude, longitude },\n        });\n        const cityName = reverseGeoResponse.data.results?.[0]?.name || \"Your Location\";\n        setWeather(prevWeather => ({ ...prevWeather, city: cityName }));\n      } else {\n        // Default location: London\n        params = { latitude: 51.5074, longitude: -0.1278 };\n        setWeather(prevWeather => ({ ...prevWeather, city: \"London\" }));\n      }\n\n      const weatherResponse = await axios.get(`https://api.open-meteo.com/v1/forecast`, {\n        params: { ...params, current_weather: true },\n      });\n\n      setWeather(prevWeather => ({ ...weatherResponse.data, city: prevWeather.city }));\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      alert(\"Unable to fetch weather data. Please try again.\");\n    }\n  };\n\n  // Fetch weather for user's location on load\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        fetchWeather({ latitude, longitude });\n      },\n      (error) => {\n        console.error(\"Error fetching user's location:\", error);\n        fetchWeather(); // Default to London if geolocation fails\n      }\n    );\n  }, []);\n\n  const toggleDarkMode = () => setDarkMode(!darkMode);\n\n  return (\n    <div className='container '>\n      <div className='row'>\n        <div className='col-12 shadow my-5'>\n          <div className={`app ${darkMode ? 'dark-mode' : ''} d-flex justify-content-center align-items-center`}>\n            <div className=\"container p-5 mx-5\">\n              <div className='d-flex justify-content-between'>\n                <h1 className='my-2'>\n                  <span><i className=\"bi bi-cloud-sun\"></i></span>Weather App\n                </h1>\n                <span onClick={toggleDarkMode} className=\"btn btn-secondary my-3\">\n                  {darkMode ? 'Light Mode' : 'Dark Mode'}\n                </span>\n              </div>\n              <div>\n                <SearchBar onSearch={(query) => fetchWeather({ query })} />\n                <Weather weather={weather} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}